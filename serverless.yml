org: stkbmf
app: moonforge-custody
service: moonforge-custody
frameworkVersion: '3'

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Comment if you don't have a DynamoDB running locally
      noStart: true
    migration:
      dir: offline/migrations
  stages:
    - dev
    - staging
    - prod
  alchemyApiKey:
    local: "b8REnI1qJYKUmzshp4T4rW1EiV_BnWNb"
    dev: "b8REnI1qJYKUmzshp4T4rW1EiV_BnWNb"
    staging: "b8REnI1qJYKUmzshp4T4rW1EiV_BnWNb"
    prod: ""
  alchemyChainRPC:
    local: "https://eth-goerli.g.alchemy.com/v2/"
    dev: "https://eth-goerli.g.alchemy.com/v2/"
    staging: "https://eth-goerli.g.alchemy.com/v2/"
    prod: ""
  ethNetwork:
    local: "goerli"
    dev: "goerli"
    staging: "goerli"
    prod: "mainnet"

provider:
  name: aws
  stage: ${opt:stage,'dev'}
  region: eu-west-1
  deploymentMethod: direct
  runtime: nodejs14.x
  memorySize: 512 # optional, in MB, default is 1024
  timeout: 10 # optional, in seconds, default is 6
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    ALCHEMY_API_KEY: ${self:custom.alchemyApiKey.${self:provider.stage}}
    ALCHEMY_CHAIN_RPC: ${self:custom.alchemyChainRPC.${self:provider.stage}}
    ETH_NETWORK: ${self:custom.ethNetwork.${self:provider.stage}}

  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  signup:
    handler: account/signup.signup
    events:
      - httpApi:
          path: /account
          method: post

  list:
    handler: account/list.list
    events:
      - httpApi:
          path: /account
          method: get

  get:
    handler: account/get.get
    events:
      - httpApi:
          path: /account/{id}
          method: get

  update:
    handler: account/update.update
    events:
      - httpApi:
          path: /account/{id}
          method: put

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          # - AttributeName: sk
          #   AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          # - AttributeName: sk
          #   KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
